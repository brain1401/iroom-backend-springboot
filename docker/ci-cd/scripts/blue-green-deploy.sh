#!/bin/bash

# =============================================================================
# Blue-Green Deployment Script for Spring Boot Application
# =============================================================================
# 포트 스위칭을 통한 무중단 배포
# - Blue: 8080 포트 (현재 서비스)
# - Green: 8081 포트 (새로운 배포)
# - Nginx 프록시 자동 전환
# - 헬스체크 기반 검증
# - 롤백 지원
# =============================================================================

set -e

# 스크립트 설정
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="/opt/applications/iroom-backend"
DOCKER_IMAGE="iroom/spring-backend"
CONTAINER_PREFIX="iroom-backend"
NGINX_CONFIG_DIR="/etc/nginx/conf.d"
LOG_FILE="/opt/logs/deployment.log"

# 포트 설정
BLUE_PORT=8080
GREEN_PORT=8081
PROXY_PORT=80

# 컬러 출력
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 로깅 함수
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

# 현재 활성 환경 확인
get_current_environment() {
    local active_port=$(grep -o 'server localhost:[0-9]*' "$NGINX_CONFIG_DIR/upstream.conf" | grep -o '[0-9]*' | head -1)
    
    if [ "$active_port" = "$BLUE_PORT" ]; then
        echo "blue"
    elif [ "$active_port" = "$GREEN_PORT" ]; then
        echo "green"
    else
        echo "unknown"
    fi
}

# 대상 환경 결정
get_target_environment() {
    local current=$(get_current_environment)
    
    if [ "$current" = "blue" ]; then
        echo "green"
    elif [ "$current" = "green" ]; then
        echo "blue"
    else
        echo "blue"  # 기본값
    fi
}

# 환경별 포트 반환
get_port() {
    local env=$1
    if [ "$env" = "blue" ]; then
        echo "$BLUE_PORT"
    else
        echo "$GREEN_PORT"
    fi
}

# 헬스체크 함수
health_check() {
    local port=$1
    local max_attempts=${2:-30}
    local wait_time=${3:-10}
    
    log "헬스체크 시작 (포트: $port, 최대 시도: $max_attempts회)"
    
    for i in $(seq 1 $max_attempts); do
        if curl -f -s "http://localhost:$port/api/system/health" > /dev/null 2>&1; then
            log_success "헬스체크 성공 (시도: $i/$max_attempts)"
            return 0
        fi
        
        log "헬스체크 시도 $i/$max_attempts 실패, ${wait_time}초 대기..."
        sleep $wait_time
    done
    
    log_error "헬스체크 실패 - 서비스가 정상적으로 시작되지 않았습니다"
    return 1
}

# 컨테이너 상태 확인
check_container_status() {
    local container_name=$1
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container_name$"; then
        echo "running"
    elif docker ps -a --format "table {{.Names}}" | grep -q "^$container_name$"; then
        echo "stopped"
    else
        echo "not_exist"
    fi
}

# 새로운 버전 배포
deploy_new_version() {
    local target_env=$1
    local image_tag=${2:-latest}
    local target_port=$(get_port $target_env)
    local container_name="${CONTAINER_PREFIX}-${target_env}"
    
    log "새로운 버전 배포 시작 (환경: $target_env, 포트: $target_port)"
    
    # 기존 컨테이너 정리
    local status=$(check_container_status $container_name)
    if [ "$status" != "not_exist" ]; then
        log "기존 컨테이너 정리: $container_name"
        docker stop $container_name || true
        docker rm $container_name || true
    fi
    
    # 새 컨테이너 시작
    log "새 컨테이너 시작: $container_name"
    docker run -d \
        --name $container_name \
        --restart unless-stopped \
        -p $target_port:3055 \
        -e SPRING_PROFILES_ACTIVE=production \
        -e SERVER_PORT=3055 \
        --network host \
        --health-cmd="curl -f http://localhost:3055/api/system/health || exit 1" \
        --health-interval=30s \
        --health-timeout=10s \
        --health-retries=3 \
        --health-start-period=60s \
        $DOCKER_IMAGE:$image_tag
    
    # 컨테이너 시작 확인
    sleep 10
    if [ "$(check_container_status $container_name)" != "running" ]; then
        log_error "컨테이너 시작 실패"
        return 1
    fi
    
    # 헬스체크
    if ! health_check $target_port; then
        log_error "새 버전 헬스체크 실패"
        return 1
    fi
    
    log_success "새 버전 배포 완료 (환경: $target_env)"
    return 0
}

# Nginx 설정 업데이트
update_nginx_config() {
    local target_env=$1
    local target_port=$(get_port $target_env)
    
    log "Nginx 설정 업데이트 (대상: $target_env, 포트: $target_port)"
    
    # 업스트림 설정 업데이트
    cat > "$NGINX_CONFIG_DIR/upstream.conf" << EOF
# Auto-generated by deployment script
# Last updated: $(date)
upstream backend {
    server localhost:$target_port max_fails=3 fail_timeout=30s;
    keepalive 32;
}
EOF
    
    # 설정 파일 검증
    if ! nginx -t; then
        log_error "Nginx 설정 검증 실패"
        return 1
    fi
    
    # Nginx 재로드
    if ! nginx -s reload; then
        log_error "Nginx 재로드 실패"
        return 1
    fi
    
    log_success "Nginx 설정 업데이트 완료"
    return 0
}

# 이전 환경 정리
cleanup_old_environment() {
    local old_env=$1
    local old_port=$(get_port $old_env)
    local container_name="${CONTAINER_PREFIX}-${old_env}"
    
    log "이전 환경 정리 (환경: $old_env)"
    
    # 잠시 대기 (안전한 정리를 위해)
    sleep 30
    
    # 컨테이너 중지 및 제거
    if [ "$(check_container_status $container_name)" = "running" ]; then
        docker stop $container_name || true
        sleep 5
        docker rm $container_name || true
    fi
    
    log_success "이전 환경 정리 완료"
}

# 롤백 함수
rollback() {
    local current_env=$(get_current_environment)
    local previous_env
    
    if [ "$current_env" = "blue" ]; then
        previous_env="green"
    else
        previous_env="blue"
    fi
    
    local previous_port=$(get_port $previous_env)
    local container_name="${CONTAINER_PREFIX}-${previous_env}"
    
    log_warning "롤백 시작 (이전 환경: $previous_env)"
    
    # 이전 컨테이너가 실행 중인지 확인
    if [ "$(check_container_status $container_name)" != "running" ]; then
        log_error "롤백할 이전 환경이 실행되고 있지 않습니다"
        return 1
    fi
    
    # 헬스체크
    if ! health_check $previous_port 10 5; then
        log_error "이전 환경 헬스체크 실패 - 롤백 불가"
        return 1
    fi
    
    # Nginx 설정 복원
    if update_nginx_config $previous_env; then
        log_success "롤백 완료"
        return 0
    else
        log_error "롤백 실패"
        return 1
    fi
}

# 메인 배포 함수
deploy() {
    local image_tag=${1:-latest}
    local skip_cleanup=${2:-false}
    
    log "배포 시작 (이미지: $DOCKER_IMAGE:$image_tag)"
    
    # 현재 상태 확인
    local current_env=$(get_current_environment)
    local target_env=$(get_target_environment)
    
    log "현재 환경: $current_env, 대상 환경: $target_env"
    
    # 새 버전 배포
    if ! deploy_new_version $target_env $image_tag; then
        log_error "새 버전 배포 실패"
        return 1
    fi
    
    # 트래픽 전환
    if ! update_nginx_config $target_env; then
        log_error "트래픽 전환 실패"
        return 1
    fi
    
    # 최종 헬스체크 (프록시를 통해)
    sleep 5
    if ! health_check $PROXY_PORT 10 3; then
        log_error "최종 헬스체크 실패 - 롤백 실행"
        rollback
        return 1
    fi
    
    log_success "배포 성공! 트래픽이 $target_env 환경으로 전환되었습니다"
    
    # 이전 환경 정리 (옵션)
    if [ "$skip_cleanup" != "true" ]; then
        cleanup_old_environment $current_env
    fi
    
    return 0
}

# 상태 확인
status() {
    local current_env=$(get_current_environment)
    local current_port=$(get_port $current_env)
    
    echo "=== 현재 배포 상태 ==="
    echo "활성 환경: $current_env (포트: $current_port)"
    echo
    
    echo "=== 컨테이너 상태 ==="
    for env in blue green; do
        local container_name="${CONTAINER_PREFIX}-${env}"
        local status=$(check_container_status $container_name)
        local port=$(get_port $env)
        
        printf "%-10s: %s (포트: %s)\n" "$env" "$status" "$port"
    done
    
    echo
    echo "=== 헬스체크 결과 ==="
    for env in blue green; do
        local port=$(get_port $env)
        local container_name="${CONTAINER_PREFIX}-${env}"
        
        if [ "$(check_container_status $container_name)" = "running" ]; then
            if curl -f -s "http://localhost:$port/api/system/health" > /dev/null 2>&1; then
                printf "%-10s: ${GREEN}HEALTHY${NC} (포트: %s)\n" "$env" "$port"
            else
                printf "%-10s: ${RED}UNHEALTHY${NC} (포트: %s)\n" "$env" "$port"
            fi
        else
            printf "%-10s: ${YELLOW}NOT RUNNING${NC} (포트: %s)\n" "$env" "$port"
        fi
    done
}

# 도움말
show_help() {
    cat << EOF
Blue-Green Deployment Script for Spring Boot Application

사용법: $0 [명령] [옵션]

명령:
    deploy [TAG]        새 버전 배포 (기본: latest)
    rollback           이전 버전으로 롤백
    status             현재 배포 상태 확인
    cleanup [ENV]      특정 환경 정리
    help              이 도움말 표시

예시:
    $0 deploy                    # latest 태그로 배포
    $0 deploy v1.2.3            # 특정 태그로 배포
    $0 rollback                 # 롤백
    $0 status                   # 상태 확인
    $0 cleanup blue             # blue 환경 정리

EOF
}

# 메인 로직
main() {
    # 로그 디렉토리 생성
    mkdir -p "$(dirname "$LOG_FILE")"
    
    case "${1:-help}" in
        deploy)
            deploy "${2:-latest}" "${3:-false}"
            ;;
        rollback)
            rollback
            ;;
        status)
            status
            ;;
        cleanup)
            if [ -n "$2" ]; then
                cleanup_old_environment "$2"
            else
                log_error "정리할 환경을 지정해주세요 (blue 또는 green)"
                exit 1
            fi
            ;;
        help|*)
            show_help
            ;;
    esac
}

# 스크립트 실행
main "$@"