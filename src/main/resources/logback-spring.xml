<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">

  <!-- spring-property 바인딩 설정 -->
  <springProperty scope="context" name="LOG_PATH" source="logging.file.path" defaultValue="logs" />
  <springProperty scope="context" name="APP_NAME" source="spring.application.name"
    defaultValue="spring-backend" />

  <!-- Spring Boot 제공 컨버터 등록 -->
  <conversionRule conversionWord="clr"
    converterClass="org.springframework.boot.logging.logback.ColorConverter" />
  <conversionRule conversionWord="wEx"
    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
  <conversionRule conversionWord="highlight"
    converterClass="org.springframework.boot.logging.logback.HighlightConverter" />

  <!-- 패턴 정의 -->
  <property name="CONSOLE_LOG_PATTERN"
    value="[%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}] %clr(%5p) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx" />
  <property name="FILE_LOG_PATTERN"
    value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %5p ${PID:-} --- [%15.15t] %-40.40logger{39} : %m%n%wEx" />

  <!-- 콘솔 출력: 색상 적용 -->
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 애플리케이션 공통 파일 롤링 설정 (시간+크기 기준) -->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/${APP_NAME}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_PATH}/${APP_NAME}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
      <maxHistory>30</maxHistory>
      <totalSizeCap>2GB</totalSizeCap>
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 에러 전용 파일 (ERROR 이상만) -->
  <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/${APP_NAME}-error.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_PATH}/${APP_NAME}-error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
      <maxHistory>30</maxHistory>
      <totalSizeCap>1GB</totalSizeCap>
      <maxFileSize>50MB</maxFileSize>
    </rollingPolicy>
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>ERROR</level>
    </filter>
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 비동기 처리: 파일 I/O 오프로딩 -->
  <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>8192</queueSize>
    <neverBlock>true</neverBlock>
    <appender-ref ref="FILE" />
  </appender>
  <appender name="ASYNC_FILE_ERROR" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>4096</queueSize>
    <neverBlock>true</neverBlock>
    <appender-ref ref="FILE_ERROR" />
  </appender>

  <!-- 루트 로거 -->
  <root level="INFO">
    <appender-ref ref="CONSOLE" />
    <appender-ref ref="ASYNC_FILE" />
    <appender-ref ref="ASYNC_FILE_ERROR" />
  </root>

  <!-- 필요시 패키지별 레벨 조정 가능 (application.yml의 설정과 병행 동작) -->
  <!--
	<logger name="org.hibernate.SQL" level="DEBUG"/>
	<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>
	<logger name="com.iroomclass.spring_backend" level="DEBUG"/>
	-->

</configuration>