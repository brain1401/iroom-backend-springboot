# =============================================================================
# CI/CD Pipeline for Spring Boot 3.5.4 Application
# =============================================================================
# 이 워크플로우는 완전 자동화된 CI/CD 파이프라인을 제공합니다:
# - 코드 품질 검사 및 테스트
# - CDS 최적화 Docker 이미지 빌드
# - AWS ECR에 이미지 푸시
# - CodeDeploy를 통한 Blue-Green 무중단 배포
# - 슬랙 알림 및 롤백 지원
# =============================================================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: [v*]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: iroom/spring-backend
  APPLICATION_NAME: iroom-backend
  DEPLOYMENT_GROUP: production
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.3'

jobs:
  # ==========================================================================
  # Code Quality & Testing
  # ==========================================================================
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-24.04
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'bellsoft'  # Liberica JDK

      - name: 📋 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 📊 Run tests and generate reports
        run: |
          ./gradlew clean test jacocoTestReport
        env:
          SPRING_PROFILES_ACTIVE: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: test_db
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: 📈 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/reports/tests/test/

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: build/reports/jacoco/test/

      - name: 📋 Comment test results on PR
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 'Test Results'
          path: 'build/test-results/test/*.xml'
          reporter: java-junit

  # ==========================================================================
  # Build & Push Docker Image
  # ==========================================================================
  build:
    name: 🔨 Build & Push Image
    runs-on: ubuntu-24.04
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'bellsoft'

      - name: 📋 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔨 Build application
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar
        env:
          SPRING_PROFILES_ACTIVE: production

      - name: 🏷️ Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=commit-

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build and push Docker image (CDS enabled)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.cds
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            JAR_FILE=build/libs/*.jar
            JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC

      - name: 📋 Generate deployment manifest
        run: |
          cat > deployment-manifest.json << EOF
          {
            "imageUri": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}",
            "imageTag": "${{ steps.meta.outputs.version }}",
            "commitSha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "buildTime": "$(date -Iseconds)",
            "actor": "${{ github.actor }}"
          }
          EOF

      - name: 📤 Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.json

  # ==========================================================================
  # Deploy to Production
  # ==========================================================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: [self-hosted, production]
    needs: build
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://api.iroom.example.com

    steps:
      - name: 📥 Download deployment manifest
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifest

      - name: 📋 Load deployment info
        id: deployment-info
        run: |
          IMAGE_URI=$(jq -r '.imageUri' deployment-manifest.json)
          IMAGE_TAG=$(jq -r '.imageTag' deployment-manifest.json)
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 📥 Pull latest Docker image
        run: |
          docker pull ${{ steps.deployment-info.outputs.image-uri }}
          docker tag ${{ steps.deployment-info.outputs.image-uri }} iroom/spring-backend:latest
          docker tag ${{ steps.deployment-info.outputs.image-uri }} iroom/spring-backend:${{ steps.deployment-info.outputs.image-tag }}

      - name: 🚀 Execute Blue-Green deployment
        id: deploy
        run: |
          cd /opt/scripts
          ./blue-green-deploy.sh deploy ${{ steps.deployment-info.outputs.image-tag }}
        
      - name: 🔍 Verify deployment
        run: |
          sleep 30
          curl -f http://localhost/api/system/health || exit 1
          echo "✅ Deployment verification successful"

      - name: 🧹 Cleanup old images
        run: |
          # 3개 이전 버전만 유지
          docker images iroom/spring-backend --format "table {{.ID}}\t{{.Tag}}" | \
            tail -n +4 | head -n -3 | awk '{print $1}' | xargs -r docker rmi || true

  # ==========================================================================
  # Rollback (Manual Trigger)
  # ==========================================================================
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: [self-hosted, production]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    
    steps:
      - name: 🔄 Execute rollback
        run: |
          cd /opt/scripts
          ./blue-green-deploy.sh rollback

      - name: 🔍 Verify rollback
        run: |
          sleep 15
          curl -f http://localhost/api/system/health || exit 1
          echo "✅ Rollback verification successful"

  # ==========================================================================
  # Notifications
  # ==========================================================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-24.04
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: 📢 Slack notification - Success
        if: needs.deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🎉 *Deployment Successful*
            
            📦 Repository: ${{ github.repository }}
            🏷️ Version: ${{ needs.build.outputs.image-tag }}
            👤 Deployed by: ${{ github.actor }}
            🌐 Environment: Production
            
            ✅ All services are healthy
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Slack notification - Failure
        if: needs.deploy.result == 'failure' || needs.build.result == 'failure' || needs.test.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            🚨 *Deployment Failed*
            
            📦 Repository: ${{ github.repository }}
            👤 Author: ${{ github.actor }}
            🌐 Environment: Production
            
            ❌ Please check the workflow logs
            🔄 Consider running rollback if needed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📊 Update deployment status
        if: always()
        run: |
          STATUS="${{ needs.deploy.result }}"
          if [ "$STATUS" = "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed with status: $STATUS"
          fi