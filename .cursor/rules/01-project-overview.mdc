---
description: iRoom-Backend 프로젝트 개요 및 기술 스택
alwaysApply: true
---

# iRoom-Backend 프로젝트 개요

## 프로젝트 정보
- **프로젝트명**: iRoom-Backend Spring Boot 교육시스템
- **주요 기능**: 온라인 시험 관리, AI 답안지 인식, PDF 생성, 통계 분석
- **개발팀**: 이룸클래스

## 기술 스택

### Core Framework
- **Spring Boot**: 3.5.4
- **Java**: 21 (LTS) - Record, Pattern Matching, Text Blocks 적극 활용
- **Build Tool**: Gradle 8+

### Database & Cache  
- **Database**: MySQL 8.0
- **ORM**: Spring Data JPA + Hibernate
- **Cache**: Redis
- **Connection Pool**: HikariCP

### Security & Documentation
- **Security**: Spring Security 6
- **API Documentation**: OpenAPI 3 (SpringDoc)
- **Validation**: Jakarta Validation

### External Integrations
- **AI Service**: 이미지 인식 서버 연동 (답안지 처리)
- **PDF Generation**: 시험지/답안지 PDF 생성
- **QR Code**: 학생 접속용 QR 코드 생성

### Development Tools
- **Testing**: JUnit 5 + Mockito + TestContainers
- **Logging**: SLF4J + Logback
- **Development**: Spring Boot DevTools
- **Code Generation**: Lombok

## 아키텍처 원칙

### Domain-Driven Design
- 패키지 구조: `com.iroomclass.springbackend.domain.{domain}`
- 도메인별 독립적 구조 (user, admin, system)
- 계층 분리: Controller → Service → Repository → Entity

### Clean Architecture
- 의존성 방향: 상위 계층 → 하위 계층
- Service 계층에서 비즈니스 로직 집중
- Controller는 HTTP 관련 처리만

### SOLID 원칙 준수
- 단일 책임 원칙 (SRP)
- 개방-폐쇄 원칙 (OCP)  
- 의존성 역전 원칙 (DIP)

## 주요 도메인

### User Domain (학생 영역)
- 학생 로그인 (이름 + 전화번호)
- 시험 응시 및 답안 제출
- AI 이미지 인식을 통한 답안 처리

### Admin Domain (관리자 영역)  
- 문제 관리 (LaTeX 지원)
- 시험지 생성 및 관리
- 시험 등록 및 통계 분석
- PDF 문서 생성

### System Domain (시스템 영역)
- 헬스체크 및 모니터링
- 공통 유틸리티 기능

## 코딩 철학

### 현대적 Java 활용
- Java 21의 최신 기능을 적극 활용
- Record를 통한 불변 데이터 구조
- Pattern Matching을 통한 가독성 향상

### 한국어 중심 개발
- 모든 로그 메시지는 한국어
- JavaDoc 및 주석은 한국어  
- 예외 메시지는 한국어
- 비즈니스 용어는 한국어 유지

### 품질 중심
- 테스트 커버리지 80% 이상
- 코드 리뷰 필수
- 정적 분석 도구 활용
- 문서화 철저

## 환경 구성

### Development
- Profile: `dev`
- Database: Local MySQL
- Cache: Local Redis
- 로그 레벨: DEBUG

### Production  
- Profile: `prod`
- Database: Production MySQL (Master-Slave)
- Cache: Redis Cluster
- 로그 레벨: INFO

## 배포 전략

### Containerization
- Docker 기반 컨테이너화
- Docker Compose를 통한 로컬 개발
- Kubernetes 준비 (향후)

### CI/CD Pipeline
- GitHub Actions 기반
- 자동 테스트 실행
- Blue-Green 배포 지원

이 프로젝트는 교육 기술을 통해 학습 경험을 향상시키는 것을 목표로 합니다.